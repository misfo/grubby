//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:3
import (
	"github.com/grubby/grubby/ast"
	"strings"
)

var Statements []ast.Node

//line parser.y:16
type RubySymType struct {
	yys             int
	genericBlock    ast.Block
	genericValue    ast.Node
	genericSlice    ast.Nodes
	genericString   string
	stringSlice     []string
	switchCaseSlice []ast.SwitchCase
}

const OPERATOR = 57346
const NODE = 57347
const REF = 57348
const SYMBOL = 57349
const SPECIAL_CHAR_REF = 57350
const CAPITAL_REF = 57351
const NAMESPACED_CAPITAL_REF = 57352
const LPAREN = 57353
const RPAREN = 57354
const COMMA = 57355
const NamespacedModule = 57356
const ProcArg = 57357
const DO = 57358
const DEF = 57359
const END = 57360
const IF = 57361
const ELSE = 57362
const ELSIF = 57363
const UNLESS = 57364
const CLASS = 57365
const MODULE = 57366
const FOR = 57367
const WHILE = 57368
const UNTIL = 57369
const BEGIN = 57370
const RESCUE = 57371
const ENSURE = 57372
const BREAK = 57373
const NEXT = 57374
const REDO = 57375
const RETRY = 57376
const RETURN = 57377
const YIELD = 57378
const AND = 57379
const OR = 57380
const LAMBDA = 57381
const CASE = 57382
const WHEN = 57383
const ALIAS = 57384
const SELF = 57385
const NIL = 57386
const LESSTHAN = 57387
const GREATERTHAN = 57388
const EQUALTO = 57389
const BANG = 57390
const COMPLEMENT = 57391
const BINARY_PLUS = 57392
const UNARY_PLUS = 57393
const BINARY_MINUS = 57394
const UNARY_MINUS = 57395
const STAR = 57396
const RANGE = 57397
const OR_EQUALS = 57398
const WHITESPACE = 57399
const NEWLINE = 57400
const SEMICOLON = 57401
const COLON = 57402
const DOT = 57403
const PIPE = 57404
const SLASH = 57405
const AMPERSAND = 57406
const QUESTIONMARK = 57407
const CARET = 57408
const LBRACKET = 57409
const RBRACKET = 57410
const LBRACE = 57411
const RBRACE = 57412
const DOLLARSIGN = 57413
const ATSIGN = 57414
const FILE_CONST_REF = 57415
const LINE_CONST_REF = 57416
const EOF = 57417

var RubyToknames = []string{
	"OPERATOR",
	"NODE",
	"REF",
	"SYMBOL",
	"SPECIAL_CHAR_REF",
	"CAPITAL_REF",
	"NAMESPACED_CAPITAL_REF",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"NamespacedModule",
	"ProcArg",
	"DO",
	"DEF",
	"END",
	"IF",
	"ELSE",
	"ELSIF",
	"UNLESS",
	"CLASS",
	"MODULE",
	"FOR",
	"WHILE",
	"UNTIL",
	"BEGIN",
	"RESCUE",
	"ENSURE",
	"BREAK",
	"NEXT",
	"REDO",
	"RETRY",
	"RETURN",
	"YIELD",
	"AND",
	"OR",
	"LAMBDA",
	"CASE",
	"WHEN",
	"ALIAS",
	"SELF",
	"NIL",
	"LESSTHAN",
	"GREATERTHAN",
	"EQUALTO",
	"BANG",
	"COMPLEMENT",
	"BINARY_PLUS",
	"UNARY_PLUS",
	"BINARY_MINUS",
	"UNARY_MINUS",
	"STAR",
	"RANGE",
	"OR_EQUALS",
	"WHITESPACE",
	"NEWLINE",
	"SEMICOLON",
	"COLON",
	"DOT",
	"PIPE",
	"SLASH",
	"AMPERSAND",
	"QUESTIONMARK",
	"CARET",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOLLARSIGN",
	"ATSIGN",
	"FILE_CONST_REF",
	"LINE_CONST_REF",
	"EOF",
}
var RubyStatenames = []string{}

const RubyEofCode = 1
const RubyErrCode = 2
const RubyMaxDepth = 200

//line parser.y:1731

//line yacctab:1
var RubyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 131,
	12, 115,
	13, 115,
	-2, 242,
	-1, 327,
	4, 21,
	37, 21,
	38, 21,
	45, 21,
	46, 21,
	50, 21,
	52, 21,
	61, 21,
	62, 21,
	63, 21,
	64, 21,
	-2, 115,
	-1, 338,
	12, 115,
	13, 115,
	-2, 242,
	-1, 376,
	4, 34,
	37, 34,
	38, 34,
	46, 34,
	50, 34,
	52, 34,
	58, 13,
	61, 34,
	62, 34,
	63, 34,
	64, 34,
	70, 13,
	-2, 15,
}

const RubyNprod = 298
const RubyPrivate = 57344

var RubyTokenNames []string
var RubyStates []string

const RubyLast = 4254

var RubyAct = []int{

	305, 423, 5, 557, 389, 33, 235, 422, 133, 233,
	173, 237, 144, 132, 55, 134, 312, 25, 293, 26,
	399, 311, 139, 375, 98, 2, 3, 99, 286, 311,
	140, 100, 28, 533, 311, 311, 311, 380, 365, 532,
	201, 501, 4, 202, 280, 105, 499, 483, 481, 260,
	311, 387, 386, 127, 130, 154, 152, 170, 171, 345,
	479, 180, 181, 96, 95, 345, 296, 157, 251, 267,
	345, 140, 241, 160, 184, 545, 289, 443, 114, 115,
	97, 196, 197, 195, 91, 123, 103, 104, 194, 14,
	311, 106, 283, 107, 91, 108, 116, 263, 526, 206,
	207, 208, 102, 111, 109, 110, 203, 158, 215, 448,
	91, 118, 153, 220, 381, 91, 159, 158, 225, 164,
	366, 229, 230, 231, 195, 344, 442, 157, 165, 151,
	438, 238, 450, 119, 154, 152, 242, 157, 449, 143,
	240, 249, 227, 250, 154, 152, 420, 247, 121, 51,
	311, 122, 352, 164, 256, 253, 275, 276, 254, 278,
	279, 163, 284, 285, 266, 290, 291, 292, 271, 257,
	259, 155, 311, 273, 118, 98, 274, 439, 99, 239,
	156, 155, 100, 297, 169, 120, 314, 315, 316, 317,
	313, 153, 161, 167, 329, 161, 119, 238, 244, 148,
	72, 153, 236, 322, 162, 547, 240, 311, 328, 177,
	117, 438, 177, 177, 540, 541, 397, 187, 168, 335,
	188, 143, 98, 98, 336, 99, 99, 166, 98, 100,
	100, 99, 177, 177, 177, 100, 143, 98, 546, 513,
	99, 347, 143, 351, 100, 239, 439, 125, 514, 397,
	358, 177, 234, 177, 177, 126, 177, 124, 177, 177,
	177, 177, 539, 177, 154, 143, 177, 309, 177, 177,
	307, 185, 98, 52, 186, 99, 301, 302, 177, 100,
	321, 148, 143, 487, 362, 177, 177, 177, 261, 253,
	411, 474, 254, 475, 93, 238, 148, 402, 493, 403,
	236, 177, 148, 177, 240, 489, 564, 177, 396, 397,
	281, 308, 98, 287, 404, 99, 397, 294, 409, 100,
	404, 426, 350, 149, 405, 148, 572, 401, 569, 568,
	400, 407, 567, 178, 569, 568, 178, 178, 417, 531,
	148, 177, 148, 239, 394, 416, 395, 510, 169, 455,
	454, 414, 251, 350, 418, 397, 178, 178, 178, 424,
	177, 192, 425, 177, 430, 428, 453, 264, 455, 454,
	433, 333, 177, 177, 334, 178, 437, 178, 178, 318,
	178, 440, 178, 178, 178, 178, 189, 178, 378, 251,
	178, 456, 178, 178, 361, 362, 536, 459, 129, 76,
	469, 469, 178, 465, 204, 149, 515, 205, 498, 178,
	178, 178, 262, 485, 177, 477, 497, 143, 177, 177,
	149, 488, 385, 384, 490, 178, 149, 178, 143, 383,
	464, 178, 490, 373, 282, 129, 76, 288, 128, 496,
	563, 295, 367, 129, 76, 355, 354, 495, 353, 149,
	349, 504, 299, 436, 298, 507, 232, 177, 210, 319,
	463, 325, 372, 177, 149, 178, 149, 306, 324, 1,
	193, 90, 516, 517, 89, 88, 87, 148, 86, 85,
	41, 40, 177, 39, 178, 38, 54, 178, 148, 470,
	20, 177, 43, 524, 44, 177, 178, 178, 21, 528,
	530, 16, 177, 12, 534, 13, 11, 45, 24, 23,
	22, 27, 19, 148, 10, 35, 30, 18, 15, 42,
	537, 17, 37, 36, 436, 31, 29, 32, 73, 0,
	490, 0, 490, 0, 0, 0, 177, 177, 178, 34,
	0, 0, 178, 178, 0, 553, 0, 0, 0, 0,
	0, 469, 469, 469, 177, 561, 0, 0, 0, 570,
	550, 551, 552, 177, 0, 0, 0, 0, 0, 574,
	523, 0, 469, 0, 0, 0, 469, 469, 469, 0,
	571, 178, 0, 0, 148, 0, 0, 178, 0, 145,
	575, 576, 0, 0, 0, 577, 0, 0, 0, 145,
	0, 149, 145, 145, 0, 0, 178, 0, 0, 0,
	0, 0, 149, 0, 0, 178, 0, 0, 0, 178,
	0, 0, 145, 145, 145, 0, 178, 0, 0, 0,
	148, 0, 177, 0, 0, 0, 0, 149, 0, 0,
	0, 145, 0, 145, 145, 0, 145, 0, 145, 145,
	145, 145, 0, 145, 0, 0, 145, 0, 145, 145,
	178, 178, 0, 9, 0, 0, 0, 0, 145, 0,
	0, 145, 0, 0, 0, 145, 145, 145, 178, 0,
	0, 0, 177, 0, 0, 0, 145, 178, 0, 0,
	0, 145, 145, 145, 0, 177, 0, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 142, 0, 145, 0, 0, 0, 0,
	0, 0, 0, 174, 0, 0, 182, 174, 0, 0,
	145, 145, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 198, 199, 200, 0,
	145, 0, 0, 145, 149, 0, 178, 0, 0, 0,
	0, 0, 145, 145, 0, 209, 0, 211, 212, 0,
	214, 0, 216, 217, 218, 219, 0, 221, 0, 0,
	224, 0, 226, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 248, 0, 0, 0, 252,
	255, 258, 0, 0, 145, 0, 178, 0, 376, 145,
	142, 0, 0, 0, 0, 270, 248, 272, 0, 178,
	0, 277, 0, 0, 0, 0, 0, 69, 146, 68,
	77, 147, 76, 131, 0, 0, 0, 151, 140, 142,
	0, 190, 0, 0, 0, 0, 0, 145, 0, 0,
	0, 0, 0, 145, 320, 326, 248, 0, 0, 0,
	0, 79, 0, 0, 105, 93, 94, 145, 0, 0,
	80, 81, 376, 82, 339, 83, 84, 340, 145, 0,
	0, 145, 413, 0, 0, 145, 342, 343, 0, 269,
	0, 141, 145, 92, 91, 71, 70, 114, 115, 0,
	0, 0, 0, 145, 183, 103, 104, 0, 0, 0,
	106, 0, 107, 0, 108, 0, 0, 191, 0, 0,
	0, 102, 111, 109, 110, 113, 145, 145, 369, 53,
	0, 0, 326, 377, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 0, 0, 213, 0, 0,
	0, 0, 0, 145, 0, 0, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 398, 0, 0, 145, 0, 0, 174, 0, 150,
	0, 0, 0, 268, 0, 0, 0, 0, 0, 179,
	0, 142, 179, 179, 0, 0, 415, 0, 0, 0,
	0, 0, 248, 0, 0, 419, 0, 0, 0, 369,
	0, 0, 179, 179, 179, 0, 427, 0, 0, 0,
	145, 0, 145, 0, 310, 0, 0, 435, 0, 0,
	0, 179, 0, 179, 179, 0, 179, 332, 179, 179,
	179, 179, 300, 179, 0, 0, 179, 0, 179, 179,
	451, 452, 0, 0, 0, 0, 0, 0, 179, 0,
	0, 150, 0, 0, 0, 179, 179, 179, 174, 105,
	0, 0, 145, 0, 0, 0, 150, 486, 0, 0,
	0, 179, 150, 179, 0, 145, 0, 179, 0, 0,
	0, 105, 0, 363, 101, 0, 0, 0, 435, 0,
	0, 172, 114, 115, 0, 150, 368, 0, 0, 0,
	103, 104, 0, 0, 0, 106, 0, 107, 0, 108,
	150, 179, 150, 0, 114, 115, 102, 111, 109, 110,
	113, 0, 103, 104, 0, 0, 0, 106, 0, 107,
	179, 108, 116, 179, 522, 0, 525, 0, 102, 111,
	109, 110, 179, 179, 0, 379, 0, 0, 0, 0,
	0, 406, 0, 0, 0, 0, 408, 410, 0, 105,
	243, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 548, 0, 179, 179,
	0, 0, 114, 115, 434, 0, 0, 0, 0, 554,
	103, 104, 0, 0, 0, 106, 444, 107, 446, 108,
	116, 0, 0, 0, 0, 0, 102, 111, 109, 110,
	0, 0, 0, 364, 0, 0, 0, 179, 0, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 480,
	0, 482, 0, 484, 213, 0, 0, 150, 0, 0,
	0, 0, 179, 0, 105, 0, 0, 0, 150, 0,
	0, 179, 0, 0, 0, 179, 348, 0, 0, 0,
	0, 0, 179, 0, 0, 356, 0, 0, 359, 502,
	0, 503, 0, 150, 0, 0, 0, 114, 115, 0,
	0, 0, 0, 0, 0, 103, 104, 0, 105, 371,
	106, 374, 107, 0, 108, 0, 179, 179, 0, 0,
	521, 102, 111, 109, 110, 0, 0, 0, 555, 0,
	0, 0, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 114, 115, 179, 392, 393, 0, 105, 0, 103,
	104, 0, 0, 0, 106, 0, 107, 0, 108, 0,
	0, 0, 543, 0, 150, 102, 111, 109, 110, 0,
	0, 0, 506, 0, 0, 374, 0, 0, 0, 0,
	114, 115, 0, 0, 0, 0, 213, 0, 103, 104,
	0, 0, 0, 106, 0, 107, 565, 108, 0, 0,
	0, 431, 0, 0, 102, 111, 109, 110, 573, 0,
	150, 505, 179, 0, 0, 0, 0, 0, 445, 447,
	69, 327, 68, 77, 176, 76, 78, 0, 0, 0,
	0, 0, 0, 0, 457, 0, 0, 0, 461, 0,
	462, 0, 0, 0, 0, 0, 476, 0, 478, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 93, 94,
	0, 0, 179, 80, 81, 0, 82, 491, 83, 84,
	0, 492, 0, 311, 0, 179, 0, 267, 0, 0,
	105, 0, 74, 0, 75, 323, 92, 91, 71, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 508, 509,
	0, 0, 0, 0, 0, 0, 512, 0, 0, 0,
	0, 0, 0, 114, 115, 0, 0, 0, 518, 0,
	520, 103, 104, 0, 0, 0, 106, 0, 107, 0,
	108, 0, 0, 0, 0, 0, 0, 102, 111, 109,
	110, 0, 0, 0, 382, 0, 0, 0, 0, 0,
	535, 69, 49, 68, 77, 50, 76, 78, 538, 0,
	0, 0, 0, 46, 560, 471, 559, 558, 472, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 549,
	66, 63, 59, 392, 393, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 467, 468, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 556, 471, 559, 558, 472, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 467, 468, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 458, 56, 391, 390, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 388, 56, 391, 390, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 529, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 397, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 527, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 397, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 429, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 397, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 421, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 397, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 69, 49, 68, 77, 50, 76, 78, 0, 0,
	0, 0, 0, 46, 0, 56, 0, 0, 57, 47,
	48, 0, 60, 61, 58, 0, 0, 64, 65, 0,
	66, 63, 59, 0, 0, 79, 62, 0, 67, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 6, 7, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 8, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 562, 471, 0, 0, 472,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 467, 468, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 542, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 519, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 511, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 500, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 494, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 473, 471, 0, 0, 472,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 467, 468, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 466, 471, 0, 0, 472,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 467, 468, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 460, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 441, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 432, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 370, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 360, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 357, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 471, 0, 0, 472,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 467, 468, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 331,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 69, 49, 68, 77, 50, 76, 78, 0,
	0, 0, 0, 0, 46, 0, 56, 0, 0, 57,
	47, 48, 0, 60, 61, 58, 0, 0, 64, 65,
	0, 66, 63, 59, 0, 0, 79, 62, 0, 67,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 69, 146, 68, 77, 147, 76, 131, 0,
	138, 0, 151, 140, 74, 0, 75, 0, 92, 91,
	71, 70, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	93, 94, 0, 0, 136, 80, 81, 0, 82, 0,
	83, 84, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 141, 0, 92, 91,
	71, 70, 69, 146, 68, 77, 147, 76, 131, 0,
	0, 0, 151, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	93, 94, 0, 0, 136, 80, 81, 0, 82, 0,
	83, 84, 69, 146, 68, 77, 147, 76, 78, 0,
	0, 0, 151, 0, 269, 0, 141, 0, 92, 91,
	71, 70, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	93, 94, 0, 0, 0, 80, 81, 0, 82, 0,
	83, 84, 0, 0, 0, 311, 69, 175, 68, 77,
	176, 76, 78, 0, 74, 0, 75, 0, 92, 91,
	71, 70, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 311,
	0, 0, 0, 267, 0, 0, 0, 0, 74, 0,
	75, 0, 92, 91, 71, 70, 69, 175, 68, 77,
	176, 76, 338, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 0, 0, 337, 80,
	81, 0, 82, 0, 83, 84, 69, 327, 68, 77,
	176, 76, 78, 0, 0, 0, 0, 0, 74, 0,
	141, 0, 92, 91, 71, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	75, 323, 92, 91, 71, 70, 69, 146, 68, 77,
	147, 76, 131, 0, 0, 0, 151, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 69, 175, 68, 77,
	176, 76, 78, 0, 0, 0, 0, 0, 269, 0,
	141, 0, 92, 91, 71, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 93, 94, 0, 0, 0, 80,
	81, 0, 82, 0, 83, 84, 0, 0, 0, 311,
	0, 69, 146, 68, 77, 147, 76, 78, 74, 0,
	75, 151, 92, 91, 71, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 69, 175, 68, 77, 176, 76, 78, 0, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 105, 93,
	94, 0, 0, 0, 80, 81, 0, 82, 0, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 74, 0, 75, 0, 92, 91, 71,
	70, 114, 115, 0, 0, 0, 112, 0, 0, 103,
	104, 0, 0, 101, 106, 0, 107, 0, 108, 0,
	0, 114, 115, 0, 105, 102, 111, 109, 110, 103,
	104, 0, 346, 566, 106, 0, 107, 0, 108, 116,
	0, 0, 0, 0, 105, 102, 111, 109, 110, 113,
	0, 0, 0, 0, 0, 0, 0, 114, 115, 0,
	0, 0, 0, 0, 544, 103, 104, 0, 0, 0,
	106, 0, 107, 0, 108, 0, 0, 114, 115, 0,
	0, 102, 111, 109, 110, 103, 104, 0, 0, 0,
	106, 0, 107, 105, 108, 0, 0, 114, 115, 0,
	341, 102, 111, 109, 110, 103, 104, 0, 0, 0,
	106, 0, 107, 412, 108, 0, 0, 0, 0, 0,
	0, 102, 111, 109, 110, 0, 114, 115, 0, 0,
	0, 0, 0, 0, 103, 104, 0, 0, 0, 106,
	0, 107, 0, 108, 0, 0, 114, 115, 0, 0,
	102, 111, 109, 110, 103, 104, 0, 0, 0, 106,
	0, 107, 0, 108, 0, 0, 0, 0, 0, 0,
	102, 111, 109, 110,
}
var RubyPact = []int{

	-33, 2106, -1000, -1000, -1000, 5, -1000, -1000, -1000, 4064,
	-1000, -1000, -1000, -1000, 188, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 129, -1000, 24, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 251, 434, 389, 3487,
	124, 60, 148, 72, 180, 171, 3437, 3437, -1000, 4006,
	3437, 3437, 4006, 4006, 252, 198, -1000, 379, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 350, -1000, 14,
	3437, 3437, 4006, 4006, 4006, -1000, -1000, -1000, -1000, -1000,
	-1000, 34, 398, -1000, -1000, -1000, -1000, -1000, 3437, 3437,
	3437, 4006, 452, 4006, 4006, -1000, 4006, 3437, 4006, 4006,
	4006, 4006, 3437, 4006, -1000, -1000, 4006, 3437, 4006, 4006,
	3437, 3437, 3437, 450, 191, 11, 289, 153, 4006, 254,
	-1000, 3956, 14, -1000, 55, 4006, 4006, 4006, 43, 354,
	7, -1000, 4169, -1000, -1000, 66, 3557, 134, 70, 145,
	106, 4006, 3956, 4006, -1000, 3437, 3437, 4006, 3437, 3437,
	38, 3437, 3437, 22, 3437, 3437, 3437, 12, 448, 446,
	203, 218, 3227, 257, 4169, 3851, 45, 0, -1000, -1000,
	253, 209, 4169, 149, 257, 3437, 3437, 3437, 3437, 372,
	3607, 3781, 3956, 3297, -1000, -1000, 203, 203, 4169, 4169,
	4169, -1000, -1000, 365, -1000, -1000, 203, 203, 203, 4169,
	3731, 4169, 4169, 3901, 4169, 203, 4169, 4169, 4169, 4169,
	203, 4120, 3901, 3901, 4169, 203, 4169, 57, 4044, 203,
	203, 203, 14, -1000, 444, 340, 125, -1000, 105, 442,
	440, 439, -1000, 3087, 389, 4169, 3017, 382, 4169, -1000,
	-1000, -1000, 1165, -30, 52, 1065, -1000, -1000, 860, -1000,
	-1000, -1000, -1000, 436, 4006, 2947, -1000, 427, 1415, 4006,
	4169, 376, 1087, -31, 46, 203, 203, 1476, 203, 203,
	-1000, -1000, -1000, 423, 203, 203, -1000, -1000, -1000, 417,
	203, 203, 203, -1000, -1000, -1000, 416, 335, -15, -16,
	1756, -1000, -1000, -1000, -1000, 203, 326, 4006, -1000, -1000,
	149, -1000, 279, 4006, 203, 203, 203, 203, -1000, 318,
	4169, -1000, -1000, -1000, 305, 277, 4189, 822, 339, 203,
	-1000, -1000, 3661, -1000, -1000, -1000, 14, 3437, 3956, 4169,
	4169, 4006, 4169, 4169, -1000, 4006, 99, -1000, 2036, 289,
	125, 309, 4006, -1000, -1000, 289, 1966, -1000, -1000, 2877,
	-1000, 14, -1000, 3607, 164, -1000, -1000, -1000, 114, 4169,
	-1000, 2807, 64, -1000, 3227, -1000, 66, 41, -1000, 91,
	-1000, -1000, 85, -1000, -1000, -1000, 4006, 4006, -1000, 348,
	3437, -1000, 1686, 2737, -1000, -1000, -1000, 426, 4169, 2667,
	2597, 273, -1000, -1000, 4006, 257, -8, -1000, -22, -1000,
	-23, -1000, 3437, 4006, -1000, 4169, -1000, 203, 271, 4169,
	3437, -1000, 287, -1000, -1000, -1000, -1000, 4169, -1000, -1000,
	280, 2527, -1000, -1000, 3607, 4169, -1000, -1000, 3437, 410,
	-1000, -1000, -1000, 402, -24, 2457, -29, 3227, 83, -1000,
	3437, 1343, 1304, -1000, 3437, -1000, 203, 3227, -1000, 329,
	-1000, 2387, 3227, 235, 400, -1000, -1000, -1000, -1000, 203,
	-1000, 3437, 3437, -1000, -1000, -1000, 2317, 257, 3227, -1000,
	3607, -1000, 3901, -1000, 92, 203, 4169, -1000, 203, -1000,
	-1000, 1896, 1826, -1000, -1000, 327, 203, -28, -1000, -1000,
	-1000, -1000, -37, 3367, 203, 233, -1000, 203, 3227, 3227,
	-1000, -1000, 3227, 390, 389, -1000, 204, 156, 2247, -1000,
	3227, 32, 4169, -1000, -1000, 4140, 15, -1000, 220, -1000,
	187, -1000, 4006, -1000, 203, 3227, -1000, -1000, 3227, -1000,
	-1000, -1000, -1000, 32, 3437, 4006, -1000, -1000, 1260, 3227,
	1616, 1546, 2177, 293, 4100, -1000, -1000, 314, 3437, -1000,
	-1000, 308, -1000, -1000, -1000, 32, -1000, -1000, 3437, -1000,
	203, 3157, -1000, 32, 203, 3157, 3157, 3157,
}
var RubyPgo = []int{

	0, 528, 0, 200, 527, 19, 8, 526, 525, 523,
	929, 522, 1, 32, 521, 12, 519, 89, 518, 517,
	663, 516, 273, 539, 515, 514, 512, 511, 510, 509,
	508, 507, 506, 505, 11, 149, 503, 501, 5, 16,
	498, 494, 492, 17, 490, 489, 3, 486, 485, 483,
	481, 480, 479, 478, 476, 475, 474, 471, 1042, 470,
	7, 13, 23, 4, 469, 9, 468, 20, 467, 15,
	462, 10, 461, 22, 14, 6, 460, 459, 440, 841,
}
var RubyR1 = []int{

	0, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 78, 78, 79, 79, 58, 58, 58, 58, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 31, 31, 31, 31,
	31, 31, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 43, 16, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 24, 61,
	61, 61, 61, 71, 71, 69, 69, 69, 69, 69,
	69, 69, 15, 73, 73, 25, 25, 25, 25, 25,
	25, 25, 25, 65, 65, 75, 75, 75, 34, 34,
	34, 34, 32, 32, 33, 36, 38, 38, 38, 17,
	17, 17, 17, 17, 17, 17, 18, 18, 74, 74,
	37, 37, 37, 37, 37, 37, 37, 10, 10, 35,
	35, 22, 22, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 8,
	3, 1, 77, 77, 77, 77, 77, 77, 77, 4,
	4, 4, 66, 66, 72, 72, 72, 6, 6, 6,
	6, 6, 6, 62, 70, 70, 70, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 63, 63,
	63, 63, 59, 59, 59, 9, 19, 19, 12, 12,
	12, 12, 76, 76, 68, 68, 60, 60, 26, 26,
	27, 28, 28, 30, 30, 30, 29, 29, 29, 13,
	44, 44, 44, 67, 67, 67, 67, 67, 45, 45,
	45, 45, 45, 46, 46, 46, 46, 42, 41, 11,
	40, 40, 40, 40, 39, 39, 5, 7,
}
var RubyR2 = []int{

	0, 0, 1, 1, 1, 3, 3, 3, 2, 2,
	2, 0, 1, 0, 2, 0, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 5, 1, 4, 4,
	2, 3, 2, 3, 4, 5, 4, 3, 4, 5,
	2, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 6, 7, 6, 6, 4, 3,
	6, 1, 4, 1, 3, 0, 1, 1, 1, 4,
	4, 4, 2, 1, 3, 5, 6, 7, 7, 8,
	8, 5, 6, 1, 3, 0, 1, 3, 1, 2,
	3, 2, 4, 6, 5, 4, 1, 2, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 9, 6,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 4, 3, 3, 3,
	4, 3, 3, 3, 4, 3, 3, 3, 4, 2,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 5,
	1, 1, 0, 1, 1, 1, 4, 4, 4, 3,
	5, 5, 3, 7, 3, 7, 8, 3, 4, 5,
	5, 5, 6, 3, 0, 1, 3, 4, 5, 3,
	3, 3, 3, 3, 5, 6, 5, 3, 4, 3,
	3, 2, 0, 2, 2, 3, 4, 6, 2, 3,
	5, 4, 1, 3, 0, 2, 1, 2, 2, 1,
	1, 2, 1, 1, 3, 3, 1, 3, 3, 5,
	5, 5, 3, 0, 2, 2, 2, 2, 5, 6,
	5, 6, 5, 4, 3, 3, 2, 4, 4, 2,
	5, 7, 4, 6, 4, 5, 3, 3,
}
var RubyChk = []int{

	-1000, -64, 58, 59, 75, -2, 58, 59, 75, -20,
	-25, -32, -36, -33, -17, -18, -37, -14, -19, -26,
	-44, -40, -28, -29, -30, -43, -5, -27, -13, -7,
	-21, -8, -4, -38, -23, -24, -9, -11, -48, -49,
	-50, -51, -16, -42, -41, -31, 17, 23, 24, 6,
	9, -35, -22, -10, -47, -74, 19, 22, 28, 36,
	26, 27, 40, 35, 31, 32, 34, 42, 7, 5,
	74, 73, -3, -1, 67, 69, 10, 8, 11, 39,
	48, 49, 51, 53, 54, -52, -53, -54, -55, -56,
	-57, 72, 71, 43, 44, 59, 58, 75, 19, 22,
	26, 29, 61, 45, 46, 4, 50, 52, 54, 63,
	64, 62, 22, 65, 37, 38, 55, 22, 45, 67,
	56, 19, 22, 61, 6, -3, 4, -38, 4, 9,
	-38, 11, -61, -6, -69, 67, 47, 56, 13, -73,
	16, 69, -20, -17, -15, -23, 6, 9, -35, -22,
	-10, 15, 11, 67, 10, 47, 56, 67, 47, 56,
	13, 47, 56, 13, 47, 56, 47, 13, 47, 13,
	-2, -2, -58, -71, -20, 6, 9, -35, -22, -10,
	-2, -2, -20, -79, -71, 19, 22, 19, 22, 7,
	-79, -79, 11, -59, -6, 69, -2, -2, -20, -20,
	-20, 6, 9, 72, 6, 9, -2, -2, -2, -20,
	6, -20, -20, -79, -20, -2, -20, -20, -20, -20,
	-2, -20, -79, -79, -20, -2, -20, -73, -20, -2,
	-2, -2, 6, -65, 61, -75, 11, -34, 6, 54,
	15, 61, -65, -58, 45, -20, -58, -69, -20, -6,
	-6, 13, -20, -5, -73, -20, -43, -13, -20, -13,
	6, -35, -22, 54, 13, -58, -62, 62, -79, 67,
	-20, -69, -20, -5, -73, -2, -2, -20, -2, -2,
	6, -35, -22, 54, -2, -2, 6, -35, -22, 54,
	-2, -2, -2, 6, -35, -22, 54, -74, 6, 6,
	-58, 58, 59, 58, 59, -2, -68, 13, 58, 58,
	-79, 58, -39, 41, -2, -2, -2, -2, 7, -77,
	-20, -17, -15, 70, -66, -72, -20, 6, -69, -2,
	59, 12, -79, 6, 9, -6, -61, 47, 11, -20,
	-20, 60, -20, -20, 68, 13, 68, -6, -58, 6,
	13, -75, 47, 6, 6, 6, -58, 18, -38, -58,
	18, 12, 13, -79, 68, 68, 68, 6, -79, -20,
	18, -58, -70, 6, -58, -62, -23, -20, 12, 68,
	68, 68, 68, 6, 6, 6, 67, 67, 18, -63,
	21, 20, -58, -58, 18, 20, -12, 29, -20, -67,
	-67, -39, 18, 20, 41, -71, -79, 13, -79, 13,
	-79, 13, 4, 60, 12, -20, -6, -2, -69, -20,
	47, 18, -60, -12, -65, -34, 12, -20, -65, 18,
	-60, -58, 18, -6, -79, -20, -17, -15, 47, 13,
	-15, 18, 62, 13, -79, -58, -79, -58, 68, 47,
	47, -20, -20, 18, 21, 20, -2, -58, 18, -63,
	18, -58, -58, -76, 4, -38, 18, 58, 59, -2,
	-45, 19, 22, 18, 18, 20, -58, -71, -58, 68,
	-79, 70, -79, 70, -79, -2, -20, 12, -2, 18,
	-12, -58, -58, 18, 18, -15, -2, 6, 6, 70,
	70, 70, -79, -79, -2, 68, 68, -2, -58, -58,
	18, 18, -58, 4, 13, 6, -2, -2, -58, 18,
	-58, -79, -20, -17, -15, -20, 6, 18, -60, 18,
	-60, 12, 67, 70, -2, -58, 6, -38, -58, 58,
	58, 59, 18, -79, 4, 60, 18, 18, -20, -58,
	-67, -67, -67, -2, -20, 68, 18, -46, 21, 20,
	18, -46, 18, -78, 13, -79, 13, 18, 21, 20,
	-2, -67, 18, -79, -2, -67, -67, -67,
}
var RubyDef = []int{

	1, -2, 2, 3, 4, 0, 8, 9, 10, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 0, 0, 0, 21,
	22, 23, 24, 25, 0, 0, 0, 0, 15, 259,
	0, 0, 13, 262, 266, 263, 260, 0, 19, 20,
	26, 27, 28, 29, 13, 13, 148, 77, 242, 0,
	0, 0, 0, 0, 0, 46, 47, 48, 49, 50,
	51, 0, 0, 200, 201, 5, 6, 7, 0, 0,
	0, 0, 0, 0, 0, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 13, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 135, 15, 0, 146,
	15, -2, 80, 82, 90, 13, 0, 0, 0, 111,
	15, 13, 116, 117, 118, 34, 21, 22, 23, 24,
	25, 0, 115, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	15, 0, 254, 258, 113, 21, 22, 23, 24, 25,
	0, 0, 13, 0, 261, 0, 0, 0, 0, 0,
	202, 0, 115, 0, 289, 13, 189, 190, 191, 192,
	74, 169, 170, 0, 167, 168, 229, 237, 272, 73,
	83, 92, 94, 0, 193, 194, 195, 196, 197, 198,
	231, 0, 0, 0, 296, 233, 93, 0, 123, 166,
	230, 232, 87, 15, 0, 133, 135, 136, 138, 0,
	0, 0, 15, 0, 0, 15, 0, 0, 116, 81,
	91, 13, 123, 0, 0, 149, 150, 151, 160, 161,
	173, 174, 175, 0, 13, 0, 15, 224, 15, 13,
	122, 0, 123, 0, 0, 152, 162, 0, 153, 163,
	177, 178, 179, 0, 154, 164, 181, 182, 183, 0,
	155, 165, 156, 185, 186, 187, 0, 157, 0, 0,
	0, 15, 15, 16, 17, 18, 0, 0, 273, 273,
	0, 14, 0, 0, 267, 268, 264, 265, 297, 13,
	203, 204, 205, 209, 13, 13, 0, -2, 0, 243,
	244, 245, 15, 171, 172, 84, 86, 0, -2, 123,
	108, 0, 287, 288, 102, 0, 103, 88, 0, 135,
	0, 0, 0, 139, 141, 135, 0, 142, 15, 0,
	145, 75, 13, 0, 95, 98, 100, 176, 0, 124,
	217, 0, 0, 225, 13, 15, -2, 123, 79, 96,
	99, 101, 97, 180, 184, 188, 0, 0, 227, 0,
	0, 15, 0, 0, 246, 15, 255, 15, 114, 0,
	0, 0, 292, 15, 0, 15, 0, 13, 0, 13,
	0, 13, 13, 0, 78, 0, 85, 89, 0, 269,
	0, 125, 0, 256, 15, 137, 134, 140, 15, 131,
	0, 0, 144, 76, 0, 119, 120, 121, 0, 0,
	112, 218, 223, 0, 0, 0, 0, 13, 95, 13,
	0, 0, 0, 228, 0, 15, 15, 241, 234, 0,
	236, 0, 248, 15, 0, 252, 270, 274, 275, 276,
	277, 0, 0, 271, 290, 15, 0, 15, 13, 199,
	0, 210, 0, 211, 0, 212, 214, 109, 107, 126,
	257, 0, 0, 132, 143, 121, 104, 0, 226, 219,
	220, 221, 0, 0, 106, 0, 159, 15, 239, 240,
	235, 247, 249, 0, 0, 15, 15, 0, 0, 293,
	13, 294, 206, 207, 208, 0, 0, 127, 0, 128,
	0, 110, 0, 222, 105, 238, 15, 253, 251, 273,
	15, 15, 291, 295, 13, 0, 129, 130, 0, 250,
	0, 0, 0, 11, 13, 158, 278, 0, 0, 273,
	280, 0, 282, 213, 12, 215, 13, 279, 0, 273,
	273, 286, 281, 216, 273, 284, 285, 283,
}
var RubyTok1 = []int{

	1,
}
var RubyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75,
}
var RubyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var RubyDebug = 0

type RubyLexer interface {
	Lex(lval *RubySymType) int
	Error(s string)
}

const RubyFlag = -1000

func RubyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(RubyToknames) {
		if RubyToknames[c-4] != "" {
			return RubyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func RubyStatname(s int) string {
	if s >= 0 && s < len(RubyStatenames) {
		if RubyStatenames[s] != "" {
			return RubyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func Rubylex1(lex RubyLexer, lval *RubySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = RubyTok1[0]
		goto out
	}
	if char < len(RubyTok1) {
		c = RubyTok1[char]
		goto out
	}
	if char >= RubyPrivate {
		if char < RubyPrivate+len(RubyTok2) {
			c = RubyTok2[char-RubyPrivate]
			goto out
		}
	}
	for i := 0; i < len(RubyTok3); i += 2 {
		c = RubyTok3[i+0]
		if c == char {
			c = RubyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = RubyTok2[1] /* unknown char */
	}
	if RubyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", RubyTokname(c), uint(char))
	}
	return c
}

func RubyParse(Rubylex RubyLexer) int {
	var Rubyn int
	var Rubylval RubySymType
	var RubyVAL RubySymType
	RubyS := make([]RubySymType, RubyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Rubystate := 0
	Rubychar := -1
	Rubyp := -1
	goto Rubystack

ret0:
	return 0

ret1:
	return 1

Rubystack:
	/* put a state and value onto the stack */
	if RubyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", RubyTokname(Rubychar), RubyStatname(Rubystate))
	}

	Rubyp++
	if Rubyp >= len(RubyS) {
		nyys := make([]RubySymType, len(RubyS)*2)
		copy(nyys, RubyS)
		RubyS = nyys
	}
	RubyS[Rubyp] = RubyVAL
	RubyS[Rubyp].yys = Rubystate

Rubynewstate:
	Rubyn = RubyPact[Rubystate]
	if Rubyn <= RubyFlag {
		goto Rubydefault /* simple state */
	}
	if Rubychar < 0 {
		Rubychar = Rubylex1(Rubylex, &Rubylval)
	}
	Rubyn += Rubychar
	if Rubyn < 0 || Rubyn >= RubyLast {
		goto Rubydefault
	}
	Rubyn = RubyAct[Rubyn]
	if RubyChk[Rubyn] == Rubychar { /* valid shift */
		Rubychar = -1
		RubyVAL = Rubylval
		Rubystate = Rubyn
		if Errflag > 0 {
			Errflag--
		}
		goto Rubystack
	}

Rubydefault:
	/* default state action */
	Rubyn = RubyDef[Rubystate]
	if Rubyn == -2 {
		if Rubychar < 0 {
			Rubychar = Rubylex1(Rubylex, &Rubylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if RubyExca[xi+0] == -1 && RubyExca[xi+1] == Rubystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Rubyn = RubyExca[xi+0]
			if Rubyn < 0 || Rubyn == Rubychar {
				break
			}
		}
		Rubyn = RubyExca[xi+1]
		if Rubyn < 0 {
			goto ret0
		}
	}
	if Rubyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Rubylex.Error("syntax error")
			Nerrs++
			if RubyDebug >= 1 {
				__yyfmt__.Printf("%s", RubyStatname(Rubystate))
				__yyfmt__.Printf(" saw %s\n", RubyTokname(Rubychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Rubyp >= 0 {
				Rubyn = RubyPact[RubyS[Rubyp].yys] + RubyErrCode
				if Rubyn >= 0 && Rubyn < RubyLast {
					Rubystate = RubyAct[Rubyn] /* simulate a shift of "error" */
					if RubyChk[Rubystate] == RubyErrCode {
						goto Rubystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if RubyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", RubyS[Rubyp].yys)
				}
				Rubyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if RubyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", RubyTokname(Rubychar))
			}
			if Rubychar == RubyEofCode {
				goto ret1
			}
			Rubychar = -1
			goto Rubynewstate /* try again in the same state */
		}
	}

	/* reduction by production Rubyn */
	if RubyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Rubyn, RubyStatname(Rubystate))
	}

	Rubynt := Rubyn
	Rubypt := Rubyp
	_ = Rubypt // guard against "declared and not used"

	Rubyp -= RubyR2[Rubyn]
	RubyVAL = RubyS[Rubyp+1]

	/* consult goto table to find next state */
	Rubyn = RubyR1[Rubyn]
	Rubyg := RubyPgo[Rubyn]
	Rubyj := Rubyg + RubyS[Rubyp].yys + 1

	if Rubyj >= RubyLast {
		Rubystate = RubyAct[Rubyg]
	} else {
		Rubystate = RubyAct[Rubyj]
		if RubyChk[Rubystate] != -Rubyn {
			Rubystate = RubyAct[Rubyg]
		}
	}
	// dummy call; replaced with literal code
	switch Rubynt {

	case 1:
		//line parser.y:219
		{
			Statements = []ast.Node{}
		}
	case 2:
		//line parser.y:221
		{
		}
	case 3:
		//line parser.y:223
		{
		}
	case 4:
		//line parser.y:225
		{
		}
	case 5:
		//line parser.y:227
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 6:
		//line parser.y:229
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 7:
		//line parser.y:231
		{
			Statements = append(Statements, RubyS[Rubypt-1].genericValue)
		}
	case 8:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 9:
		RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
	case 10:
		//line parser.y:237
		{
		}
	case 11:
		//line parser.y:239
		{
		}
	case 12:
		//line parser.y:240
		{
		}
	case 13:
		//line parser.y:242
		{
		}
	case 14:
		//line parser.y:243
		{
		}
	case 15:
		//line parser.y:246
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 16:
		//line parser.y:248
		{
		}
	case 17:
		//line parser.y:250
		{
		}
	case 18:
		//line parser.y:252
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 19:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 20:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 21:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 22:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 23:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 24:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 25:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 26:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 27:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 28:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 29:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 30:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 31:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 32:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 33:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 34:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 35:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 36:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 37:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 38:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 39:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 40:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 41:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 42:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 43:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 44:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 45:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 46:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 47:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 48:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 49:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 50:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 51:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 52:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 53:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 54:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 55:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 56:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 57:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 58:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 59:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 60:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 61:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 62:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 63:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 64:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 65:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 66:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 67:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 68:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 69:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 70:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 71:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 72:
		RubyVAL.genericValue = RubyS[Rubypt-0].genericValue
	case 73:
		//line parser.y:263
		{
			RubyVAL.genericValue = ast.RescueModifier{Statement: RubyS[Rubypt-2].genericValue, Rescue: RubyS[Rubypt-0].genericValue}
		}
	case 74:
		//line parser.y:266
		{
			RubyVAL.genericValue = ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}
		}
	case 75:
		//line parser.y:269
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 76:
		//line parser.y:278
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-2].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 77:
		//line parser.y:288
		{
			callExpr := ast.CallExpression{Func: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
			callExpr.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 78:
		//line parser.y:294
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 79:
		//line parser.y:303
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 80:
		//line parser.y:312
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 81:
		//line parser.y:321
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 82:
		//line parser.y:331
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 83:
		//line parser.y:341
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 84:
		//line parser.y:350
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 85:
		//line parser.y:361
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-4].genericValue,
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 86:
		//line parser.y:372
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-3].genericValue,
				Func:   RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 87:
		//line parser.y:382
		{
			callExpr := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   RubyS[Rubypt-0].genericValue.(ast.BareReference),
				Args:   []ast.Node{},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 88:
		//line parser.y:392
		{
			callExpr := ast.CallExpression{
				Target:        RubyS[Rubypt-3].genericValue,
				Func:          RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args:          []ast.Node{},
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 89:
		//line parser.y:403
		{
			methodName := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name + "="
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Name: methodName},
				Target: RubyS[Rubypt-4].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 90:
		//line parser.y:416
		{
			callExpr := ast.CallExpression{
				Func: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-0].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 91:
		//line parser.y:425
		{
			callExpr := ast.CallExpression{
				Func:          RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Args:          RubyS[Rubypt-1].genericSlice,
				OptionalBlock: RubyS[Rubypt-0].genericBlock,
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 92:
		//line parser.y:435
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 93:
		//line parser.y:445
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "<"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 94:
		//line parser.y:455
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: ">"},
				Target: RubyS[Rubypt-2].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 95:
		//line parser.y:467
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 96:
		//line parser.y:477
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 97:
		//line parser.y:487
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 98:
		//line parser.y:497
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 99:
		//line parser.y:507
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 100:
		//line parser.y:517
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 101:
		//line parser.y:527
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 102:
		//line parser.y:537
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   RubyS[Rubypt-1].genericSlice,
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 103:
		//line parser.y:547
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "[]"},
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 104:
		//line parser.y:559
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 105:
		//line parser.y:569
		{
			if RubyS[Rubypt-0].genericValue == nil {
				panic("WHAT THE EVER COMPILING FUCK")
			}
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-6].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-4].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 106:
		//line parser.y:582
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 107:
		//line parser.y:592
		{
			callExpr := ast.CallExpression{
				Func:   ast.BareReference{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: "[]="},
				Target: RubyS[Rubypt-5].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-3].genericValue, RubyS[Rubypt-0].genericValue},
			}
			callExpr.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = callExpr
		}
	case 108:
		//line parser.y:604
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-3].genericValue.LineNumber(),
				Func:   RubyS[Rubypt-2].genericValue.(ast.BareReference),
				Target: RubyS[Rubypt-3].genericValue,
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			RubyVAL.genericValue = callExpr
		}
	case 109:
		//line parser.y:616
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 110:
		//line parser.y:618
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-4].genericSlice, RubyS[Rubypt-1].genericValue)
		}
	case 111:
		//line parser.y:620
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 112:
		//line parser.y:622
		{
			RubyVAL.genericSlice = append(RubyS[Rubypt-3].genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 113:
		//line parser.y:625
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 114:
		//line parser.y:627
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 115:
		//line parser.y:629
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 116:
		//line parser.y:631
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 117:
		//line parser.y:633
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 118:
		//line parser.y:635
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 119:
		//line parser.y:637
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 120:
		//line parser.y:639
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 121:
		//line parser.y:641
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 122:
		//line parser.y:644
		{
			callExpr := ast.CallExpression{
				Line:   RubyS[Rubypt-0].genericValue.LineNumber(),
				Func:   ast.BareReference{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Name: "to_proc"},
				Target: RubyS[Rubypt-0].genericValue,
			}
			RubyVAL.genericValue = callExpr
		}
	case 123:
		//line parser.y:654
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 124:
		//line parser.y:656
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 125:
		//line parser.y:660
		{
			method := ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 126:
		//line parser.y:670
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 127:
		//line parser.y:681
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 128:
		//line parser.y:692
		{
			method := ast.FuncDecl{
				Target: RubyS[Rubypt-5].genericValue,
				Name:   RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args:   RubyS[Rubypt-2].genericSlice,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 129:
		//line parser.y:703
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 130:
		//line parser.y:715
		{
			method := ast.FuncDecl{
				Target:  RubyS[Rubypt-6].genericValue,
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 131:
		//line parser.y:727
		{
			method := ast.FuncDecl{
				Name: RubyS[Rubypt-3].genericValue.(ast.BareReference),
				Args: RubyS[Rubypt-2].genericSlice,
				Body: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 132:
		//line parser.y:737
		{
			method := ast.FuncDecl{
				Name:    RubyS[Rubypt-4].genericValue.(ast.BareReference),
				Args:    RubyS[Rubypt-3].genericSlice,
				Body:    RubyS[Rubypt-2].genericSlice,
				Rescues: RubyS[Rubypt-1].genericSlice,
			}
			method.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = method
		}
	case 133:
		//line parser.y:750
		{
			RubyVAL.genericSlice = RubyS[Rubypt-0].genericSlice
		}
	case 134:
		//line parser.y:752
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 135:
		//line parser.y:754
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 136:
		//line parser.y:756
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 137:
		//line parser.y:758
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 138:
		//line parser.y:761
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference)}
		}
	case 139:
		//line parser.y:763
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsSplat: true}
		}
	case 140:
		//line parser.y:765
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-2].genericValue.(ast.BareReference), DefaultValue: RubyS[Rubypt-0].genericValue}
		}
	case 141:
		//line parser.y:767
		{
			RubyVAL.genericValue = ast.MethodParam{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference), IsProc: true}
		}
	case 142:
		//line parser.y:771
		{
			class := ast.ClassDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 143:
		//line parser.y:781
		{
			class := ast.ClassDecl{
				Name:       RubyS[Rubypt-4].genericValue.(ast.Class).Name,
				SuperClass: RubyS[Rubypt-2].genericValue.(ast.Class),
				Namespace:  RubyS[Rubypt-4].genericValue.(ast.Class).Namespace,
				Body:       RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 144:
		//line parser.y:793
		{
			name := RubyS[Rubypt-3].genericValue.(ast.BareReference).Name
			if name != "<<" {
				panic("FREAKOUT :: impossible operator after 'class' keyword (" + name + ")")
			}

			class := ast.EigenClass{
				Target: RubyS[Rubypt-2].genericValue,
				Body:   RubyS[Rubypt-1].genericSlice,
			}
			class.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 145:
		//line parser.y:808
		{
			module := ast.ModuleDecl{
				Name:      RubyS[Rubypt-2].genericValue.(ast.Class).Name,
				Namespace: RubyS[Rubypt-2].genericValue.(ast.Class).Namespace,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			module.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = module
		}
	case 146:
		//line parser.y:819
		{
			class := ast.Class{
				Name:              RubyS[Rubypt-0].genericValue.(ast.BareReference).Name,
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 147:
		//line parser.y:828
		{
			firstPart := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			fullName := strings.Join([]string{firstPart, RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}, "")
			pieces := strings.Split(fullName, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			class := ast.Class{
				Name:              name,
				Namespace:         strings.Join(namespace, "::"),
				IsGlobalNamespace: false,
			}
			class.Line = RubyS[Rubypt-1].genericValue.LineNumber()
			RubyVAL.genericValue = class
		}
	case 148:
		//line parser.y:847
		{
			pieces := strings.Split(RubyS[Rubypt-0].genericValue.(ast.BareReference).Name, "::")
			name := pieces[len(pieces)-1]
			var namespace []string
			if len(pieces) > 1 {
				namespace = pieces[0 : len(pieces)-1]
			}

			RubyVAL.genericValue = ast.Class{
				Line:              RubyS[Rubypt-0].genericValue.LineNumber(),
				Name:              strings.TrimPrefix(name, "::"),
				Namespace:         strings.TrimPrefix(strings.Join(namespace, "::"), "::"),
				IsGlobalNamespace: true,
			}
		}
	case 149:
		//line parser.y:865
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 150:
		//line parser.y:874
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 151:
		//line parser.y:880
		{
			eql := ast.Assignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 152:
		//line parser.y:886
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 153:
		//line parser.y:895
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 154:
		//line parser.y:904
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 155:
		//line parser.y:913
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 156:
		//line parser.y:923
		{
			eql := ast.Assignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 157:
		//line parser.y:932
		{
			eql := ast.Assignment{
				LHS: ast.Array{Nodes: RubyS[Rubypt-2].genericSlice},
				RHS: ast.Array{Nodes: RubyS[Rubypt-0].genericSlice},
			}
			eql.Line = RubyS[Rubypt-2].genericSlice[0].(ast.CallExpression).Target.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 158:
		//line parser.y:942
		{
			RubyVAL.genericSlice = []ast.Node{
				ast.CallExpression{
					Target: RubyS[Rubypt-8].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-6].genericValue},
				},
				ast.CallExpression{
					Target: RubyS[Rubypt-3].genericValue,
					Func:   ast.BareReference{Line: RubyS[Rubypt-6].genericValue.LineNumber(), Name: "[]="},
					Args:   []ast.Node{RubyS[Rubypt-1].genericValue},
				},
			}
		}
	case 159:
		//line parser.y:957
		{
			tail := ast.CallExpression{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue, Func: ast.BareReference{Name: "[]="}, Args: []ast.Node{RubyS[Rubypt-1].genericValue}}
			RubyVAL.genericSlice = append(RubyS[Rubypt-5].genericSlice, tail)
		}
	case 160:
		//line parser.y:963
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 161:
		//line parser.y:972
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 162:
		//line parser.y:978
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 163:
		//line parser.y:987
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 164:
		//line parser.y:996
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 165:
		//line parser.y:1005
		{
			eql := ast.ConditionalAssignment{
				LHS: RubyS[Rubypt-2].genericValue,
				RHS: RubyS[Rubypt-0].genericValue,
			}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 166:
		//line parser.y:1014
		{
			eql := ast.ConditionalAssignment{LHS: RubyS[Rubypt-2].genericValue, RHS: RubyS[Rubypt-0].genericValue}
			eql.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = eql
		}
	case 167:
		//line parser.y:1021
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 168:
		//line parser.y:1023
		{
			RubyVAL.genericValue = ast.GlobalVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
		}
	case 169:
		//line parser.y:1026
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 170:
		//line parser.y:1032
		{
			ivar := ast.InstanceVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			ivar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = ivar
		}
	case 171:
		//line parser.y:1039
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 172:
		//line parser.y:1045
		{
			classvar := ast.ClassVariable{Name: RubyS[Rubypt-0].genericValue.(ast.BareReference).Name}
			classvar.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = classvar
		}
	case 173:
		//line parser.y:1052
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 174:
		//line parser.y:1054
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 175:
		//line parser.y:1056
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 176:
		//line parser.y:1058
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 177:
		//line parser.y:1061
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 178:
		//line parser.y:1063
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 179:
		//line parser.y:1065
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 180:
		//line parser.y:1067
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 181:
		//line parser.y:1070
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 182:
		//line parser.y:1072
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 183:
		//line parser.y:1074
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-2].genericValue, RubyS[Rubypt-0].genericValue}}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 184:
		//line parser.y:1076
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 185:
		//line parser.y:1079
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 186:
		//line parser.y:1081
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 187:
		//line parser.y:1083
		{
			vars := ast.Array{Nodes: append(RubyVAL.genericValue.(ast.Array).Nodes, RubyS[Rubypt-0].genericValue)}
			vars.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 188:
		//line parser.y:1085
		{
			vars := ast.Array{Nodes: []ast.Node{RubyS[Rubypt-3].genericValue, ast.StarSplat{Value: RubyS[Rubypt-0].genericValue}}}
			vars.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = vars
		}
	case 189:
		//line parser.y:1089
		{
			bang := ast.Negation{Target: RubyS[Rubypt-0].genericValue}
			bang.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = bang
		}
	case 190:
		//line parser.y:1091
		{
			comp := ast.Complement{Target: RubyS[Rubypt-0].genericValue}
			comp.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = comp
		}
	case 191:
		//line parser.y:1093
		{
			plus := ast.Positive{Target: RubyS[Rubypt-0].genericValue}
			plus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = plus
		}
	case 192:
		//line parser.y:1095
		{
			minus := ast.Negative{Target: RubyS[Rubypt-0].genericValue}
			minus.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = minus
		}
	case 193:
		//line parser.y:1098
		{
			add := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "+"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			add.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = add
		}
	case 194:
		//line parser.y:1109
		{
			sub := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "-"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			sub.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = sub
		}
	case 195:
		//line parser.y:1120
		{
			mult := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "*"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			mult.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = mult
		}
	case 196:
		//line parser.y:1131
		{
			divis := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "/"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			divis.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = divis
		}
	case 197:
		//line parser.y:1142
		{
			and := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "&"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			and.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = and
		}
	case 198:
		//line parser.y:1153
		{
			or := ast.CallExpression{
				Target: RubyS[Rubypt-2].genericValue,
				Func:   ast.BareReference{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Name: "|"},
				Args:   []ast.Node{RubyS[Rubypt-0].genericValue},
			}
			or.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = or
		}
	case 199:
		//line parser.y:1164
		{
			RubyVAL.genericValue = ast.Array{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Nodes: RubyS[Rubypt-2].genericSlice}
		}
	case 200:
		//line parser.y:1166
		{
		}
	case 201:
		//line parser.y:1167
		{
		}
	case 202:
		//line parser.y:1169
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 203:
		//line parser.y:1171
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 204:
		//line parser.y:1173
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 205:
		//line parser.y:1175
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 206:
		//line parser.y:1177
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 207:
		//line parser.y:1179
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 208:
		//line parser.y:1181
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 209:
		//line parser.y:1184
		{
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-2].genericValue.LineNumber()}
		}
	case 210:
		//line parser.y:1186
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 211:
		//line parser.y:1194
		{
			pairs := []ast.HashKeyValuePair{}
			for _, node := range RubyS[Rubypt-2].genericSlice {
				pairs = append(pairs, node.(ast.HashKeyValuePair))
			}
			RubyVAL.genericValue = ast.Hash{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Pairs: pairs}
		}
	case 212:
		//line parser.y:1203
		{
			name := RubyS[Rubypt-1].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-2].genericValue, Value: RubyS[Rubypt-0].genericValue})
		}
	case 213:
		//line parser.y:1211
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{Key: RubyS[Rubypt-3].genericValue, Value: RubyS[Rubypt-1].genericValue})
		}
	case 214:
		//line parser.y:1220
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Name: RubyS[Rubypt-2].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-0].genericValue,
			})
		}
	case 215:
		//line parser.y:1227
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Name: RubyS[Rubypt-3].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-1].genericValue,
			})
		}
	case 216:
		//line parser.y:1234
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.HashKeyValuePair{
				Key:   ast.Symbol{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Name: RubyS[Rubypt-4].genericValue.(ast.BareReference).Name},
				Value: RubyS[Rubypt-2].genericValue,
			})
		}
	case 217:
		//line parser.y:1242
		{
			block := ast.Block{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 218:
		//line parser.y:1247
		{
			block := ast.Block{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 219:
		//line parser.y:1252
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: RubyS[Rubypt-2].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 220:
		//line parser.y:1257
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Args: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice}
			RubyVAL.genericBlock = block
		}
	case 221:
		//line parser.y:1262
		{
			block := ast.Block{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			RubyVAL.genericBlock = block
		}
	case 222:
		//line parser.y:1267
		{
			head := []ast.Node{RubyS[Rubypt-3].genericValue}
			tail := RubyS[Rubypt-2].genericSlice
			body := append(head, tail...)
			block := ast.Block{Line: RubyS[Rubypt-5].genericValue.LineNumber(), Body: body}
			RubyVAL.genericBlock = block
		}
	case 223:
		//line parser.y:1276
		{
			RubyVAL.genericSlice = RubyS[Rubypt-1].genericSlice
		}
	case 224:
		//line parser.y:1278
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 225:
		//line parser.y:1280
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 226:
		//line parser.y:1282
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 227:
		//line parser.y:1285
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-2].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 228:
		//line parser.y:1294
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 229:
		//line parser.y:1304
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 230:
		//line parser.y:1313
		{
			cond := ast.IfBlock{
				Condition: RubyS[Rubypt-0].genericValue,
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 231:
		//line parser.y:1322
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 232:
		//line parser.y:1331
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 233:
		//line parser.y:1340
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      ast.Nodes{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 234:
		//line parser.y:1349
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 235:
		//line parser.y:1358
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 236:
		//line parser.y:1368
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
			cond.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 237:
		//line parser.y:1377
		{
			cond := ast.IfBlock{
				Condition: ast.Negation{Line: RubyS[Rubypt-2].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue},
				Body:      []ast.Node{RubyS[Rubypt-2].genericValue},
			}
			cond.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = cond
		}
	case 238:
		//line parser.y:1388
		{
			ifblock := ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			}
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ifblock)
		}
	case 239:
		//line parser.y:1397
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 240:
		//line parser.y:1405
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 241:
		//line parser.y:1413
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 242:
		//line parser.y:1421
		{
		}
	case 243:
		//line parser.y:1422
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 244:
		//line parser.y:1423
		{
		}
	case 245:
		//line parser.y:1426
		{
			group := ast.Group{Body: RubyS[Rubypt-1].genericSlice}
			group.Line = RubyS[Rubypt-2].genericValue.(ast.Nil).Line
			RubyVAL.genericValue = group
		}
	case 246:
		//line parser.y:1429
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-2].genericSlice,
				Rescue: RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 247:
		//line parser.y:1438
		{
			begin := ast.Begin{
				Body:   RubyS[Rubypt-4].genericSlice,
				Rescue: RubyS[Rubypt-3].genericSlice,
				Else:   RubyS[Rubypt-1].genericSlice,
			}
			begin.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = begin
		}
	case 248:
		//line parser.y:1449
		{
			RubyVAL.genericValue = ast.Rescue{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Body: RubyS[Rubypt-0].genericSlice}
		}
	case 249:
		//line parser.y:1451
		{
			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-1].genericSlice {
				classes = append(classes, class.(ast.Class))
			}
			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-2].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Classes: classes,
				},
			}
		}
	case 250:
		//line parser.y:1465
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			classes := []ast.Class{}
			for _, class := range RubyS[Rubypt-3].genericSlice {
				classes = append(classes, class.(ast.Class))
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-4].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var:     RubyS[Rubypt-1].genericValue.(ast.BareReference),
					Classes: classes,
				},
			}
		}
	case 251:
		//line parser.y:1486
		{
			name := RubyS[Rubypt-2].genericValue.(ast.BareReference).Name
			if name != "=>" {
				panic("FREAKOUT")
			}

			RubyVAL.genericValue = ast.Rescue{
				Line: RubyS[Rubypt-3].genericValue.LineNumber(),
				Body: RubyS[Rubypt-0].genericSlice,
				Exception: ast.RescueException{
					Var: RubyS[Rubypt-1].genericValue.(ast.BareReference),
				},
			}
		}
	case 252:
		//line parser.y:1502
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 253:
		//line parser.y:1504
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 254:
		//line parser.y:1507
		{
			RubyVAL.genericSlice = []ast.Node{}
		}
	case 255:
		//line parser.y:1509
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 256:
		//line parser.y:1512
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 257:
		//line parser.y:1514
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 258:
		//line parser.y:1517
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 259:
		//line parser.y:1524
		{
			RubyVAL.genericValue = ast.Yield{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 260:
		//line parser.y:1526
		{
			RubyVAL.genericValue = ast.Retry{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 261:
		//line parser.y:1529
		{
			if len(RubyS[Rubypt-0].genericSlice) == 1 {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice[0]}
			} else {
				RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: RubyS[Rubypt-0].genericSlice}
			}
		}
	case 262:
		//line parser.y:1537
		{
			RubyVAL.genericValue = ast.Return{Line: RubyS[Rubypt-0].genericValue.LineNumber()}
		}
	case 263:
		//line parser.y:1541
		{
			RubyVAL.genericValue = ast.Next{}
		}
	case 264:
		//line parser.y:1543
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Next{}}}
		}
	case 265:
		//line parser.y:1545
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Next{}}}
		}
	case 266:
		//line parser.y:1549
		{
			RubyVAL.genericValue = ast.Break{}
		}
	case 267:
		//line parser.y:1551
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{ast.Break{}}}
		}
	case 268:
		//line parser.y:1553
		{
			RubyVAL.genericValue = ast.IfBlock{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Condition: ast.Negation{Line: RubyS[Rubypt-0].genericValue.LineNumber(), Target: RubyS[Rubypt-0].genericValue}, Body: []ast.Node{ast.Break{}}}
		}
	case 269:
		//line parser.y:1557
		{
			ternary := ast.Ternary{
				Condition: RubyS[Rubypt-4].genericValue,
				True:      RubyS[Rubypt-2].genericValue,
				False:     RubyS[Rubypt-0].genericValue,
			}
			ternary.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = ternary
		}
	case 270:
		//line parser.y:1568
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-3].genericValue, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 271:
		//line parser.y:1574
		{
			condition := ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue}
			loop := ast.Loop{Condition: condition, Body: RubyS[Rubypt-1].genericSlice}
			loop.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 272:
		//line parser.y:1581
		{
			loop := ast.Loop{Condition: RubyS[Rubypt-0].genericValue, Body: []ast.Node{RubyS[Rubypt-2].genericValue}}
			loop.Line = RubyS[Rubypt-0].genericValue.LineNumber()
			RubyVAL.genericValue = loop
		}
	case 273:
		//line parser.y:1588
		{
			RubyVAL.genericSlice = ast.Nodes{}
		}
	case 274:
		//line parser.y:1590
		{
		}
	case 275:
		//line parser.y:1592
		{
		}
	case 276:
		//line parser.y:1594
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 277:
		//line parser.y:1596
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, RubyS[Rubypt-0].genericValue)
		}
	case 278:
		//line parser.y:1599
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-3].genericValue,
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 279:
		//line parser.y:1607
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-4].genericValue,
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 280:
		//line parser.y:1616
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 281:
		//line parser.y:1624
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-4].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-4].genericValue.LineNumber(), Target: RubyS[Rubypt-4].genericValue},
				Body:      RubyS[Rubypt-2].genericSlice,
				Else:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 282:
		//line parser.y:1633
		{
			RubyVAL.genericValue = ast.IfBlock{
				Line:      RubyS[Rubypt-3].genericValue.LineNumber(),
				Condition: ast.Negation{Line: RubyS[Rubypt-3].genericValue.LineNumber(), Target: RubyS[Rubypt-3].genericValue},
				Body:      RubyS[Rubypt-1].genericSlice,
			}
		}
	case 283:
		//line parser.y:1642
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 284:
		//line parser.y:1650
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-2].genericSlice.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-2].genericSlice.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 285:
		//line parser.y:1658
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: RubyS[Rubypt-1].genericValue,
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 286:
		//line parser.y:1666
		{
			RubyVAL.genericSlice = append(RubyVAL.genericSlice, ast.IfBlock{
				Line:      RubyS[Rubypt-1].genericValue.LineNumber(),
				Condition: ast.Boolean{Line: RubyS[Rubypt-1].genericValue.LineNumber(), Value: true},
				Body:      RubyS[Rubypt-0].genericSlice,
			})
		}
	case 287:
		//line parser.y:1675
		{
			RubyVAL.genericValue = ast.WeakLogicalAnd{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 288:
		//line parser.y:1678
		{
			RubyVAL.genericValue = ast.WeakLogicalOr{Line: RubyS[Rubypt-3].genericValue.LineNumber(), LHS: RubyS[Rubypt-3].genericValue, RHS: RubyS[Rubypt-0].genericValue}
		}
	case 289:
		//line parser.y:1681
		{
			lambda := ast.Lambda{Body: RubyS[Rubypt-0].genericBlock}
			lambda.Line = RubyS[Rubypt-0].genericBlock.LineNumber()
			RubyVAL.genericValue = lambda
		}
	case 290:
		//line parser.y:1688
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-3].genericValue, Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-4].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 291:
		//line parser.y:1694
		{
			switchstmt := ast.SwitchStatement{Condition: RubyS[Rubypt-5].genericValue, Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-6].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 292:
		//line parser.y:1700
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-1].switchCaseSlice}
			switchstmt.Line = RubyS[Rubypt-3].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 293:
		//line parser.y:1706
		{
			switchstmt := ast.SwitchStatement{Cases: RubyS[Rubypt-3].switchCaseSlice, Else: RubyS[Rubypt-1].genericSlice}
			switchstmt.Line = RubyS[Rubypt-5].genericValue.LineNumber()
			RubyVAL.genericValue = switchstmt
		}
	case 294:
		//line parser.y:1713
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 295:
		//line parser.y:1715
		{
			RubyVAL.switchCaseSlice = append(RubyVAL.switchCaseSlice, ast.SwitchCase{Conditions: RubyS[Rubypt-2].genericSlice, Body: RubyS[Rubypt-1].genericSlice})
		}
	case 296:
		//line parser.y:1718
		{
			rng := ast.Range{Start: RubyS[Rubypt-2].genericValue, End: RubyS[Rubypt-0].genericValue}
			rng.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = rng
		}
	case 297:
		//line parser.y:1725
		{
			alias := ast.Alias{To: RubyS[Rubypt-1].genericValue.(ast.Symbol), From: RubyS[Rubypt-0].genericValue.(ast.Symbol)}
			alias.Line = RubyS[Rubypt-2].genericValue.LineNumber()
			RubyVAL.genericValue = alias
		}
	}
	goto Rubystack /* stack new state and value */
}
